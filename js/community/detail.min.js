'use strict';

var _createClass = function () { function defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } } return function (Constructor, protoProps, staticProps) { if (protoProps) defineProperties(Constructor.prototype, protoProps); if (staticProps) defineProperties(Constructor, staticProps); return Constructor; }; }();

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1. 项目名称：悟空找房h5
 2. 页面名称：subestate/detail(小区-详情)
 3. 作者：tangxuyang@lifang.com
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
var DetailController = function (_Controller) {
    _inherits(DetailController, _Controller);

    function DetailController() {
        _classCallCheck(this, DetailController);

        var _this = _possibleConstructorReturn(this, (DetailController.__proto__ || Object.getPrototypeOf(DetailController)).call(this));

        var self = _this;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        页面顶部的返回按钮
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $('.icon-back').on('click', function () {
            window.history.go(-1);
        });
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        相册集图片预览功能
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        require(['../components/album.min', '../components/preview-image.min'], function (Album, PreviewImage) {
            PreviewImage('.subestate-comments');
        });
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        请求接口 获取折线图参数
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        var that = _this;
        // 获取小区加密Id
        var encryptsubestateid = $('#estateName').attr('data-encryptsubestateid');
        _this.request(_this.apiUrl.community.chart, { subEstateId: encryptsubestateid }, {
            successCallback: function successCallback(data) {
                if (data.status == 1) {
                    var dataRes = data;
                    var echartData = that.recombineM(dataRes.data);
                    that.echartFun(echartData);
                }
            }
        });
        return _this;
    }

    _createClass(DetailController, [{
        key: 'echartFun',


        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        折线图函数异步操作
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        value: function echartFun(echartData) {
            var sortArray = echartData.seriesData.sort(function (a, b) {
                return parseFloat(a) - parseFloat(b);
            });
            var maxPrice = Math.ceil(sortArray[sortArray.length - 1] / 10000 + 1) * 10000;
            var myChart = echarts.init(document.getElementById('main'), { width: '88%' });
            var that = this;
            // 给折线图dome增加埋点
            var houseId = $('#estateName').attr('data-houseid');
            var subestateid = $('#estateName').attr('data-subestateid');
            var echartBigData = {
                "eventName": "1067014",
                "eventParam": { "house_id": houseId, "estate_id": subestateid },
                "type": 2
            };
            // 指定图表的配置项和数据
            var option = {
                tooltip: { // 提示框
                    trigger: 'item',
                    triggerOn: 'click',
                    position: 'top',
                    backgroundColor: '#92A7C3',
                    padding: 4,
                    textStyle: {
                        color: '#fff',
                        fontSize: '12'
                    },
                    formatter: function formatter(params, ticket, callback) {
                        var paramsValue = params.value + "元";
                        that.request(that.apiUrl.common.bigData, echartBigData, function () {});
                        return paramsValue;
                    }
                },
                grid: {
                    bottom: 20,
                    left: '3%',
                    right: '10%',
                    containLabel: true
                },
                xAxis: {
                    data: echartData.monthList, // X坐标数据
                    splitLine: { show: false }, // 控制网格线是否显示
                    axisTick: { show: false }, // 去除x轴上的刻度线
                    position: 'bottom',
                    type: 'category',
                    boundaryGap: false,
                    axisLine: {
                        lineStyle: {
                            color: '#979797' // x轴颜色
                        }
                    },
                    axisLabel: {
                        interval: 0,
                        rotate: 0, //60度角倾斜显示
                        textStyle: {
                            color: '#999',
                            fontSize: 12,
                            fontFamily: '微软雅黑'
                        }
                    }
                },
                yAxis: {
                    axisLine: { show: false }, // y轴是否显示
                    splitLine: {
                        show: true, // 控制网格线是否显示
                        lineStyle: {
                            color: ['#979797'] // y刻度颜色
                        }
                    },
                    axisTick: { show: false }, // 去除y轴上的刻度线
                    axisLabel: {
                        inside: false,
                        textStyle: {
                            color: '#999'
                        },
                        formatter: function formatter(value, index) {
                            if (value == 0) {
                                return "";
                            } else {
                                return value / 10000 + '万';
                            }
                        }
                    },
                    min: 0,
                    max: maxPrice,
                    splitNumber: 6,
                    interval: maxPrice / 4
                },
                series: [{
                    name: '销量',
                    type: 'line',
                    lineStyle: {
                        normal: {
                            color: '#92A7C3' // 折线条颜色
                        }

                    },
                    itemStyle: {
                        normal: {
                            color: "#92A7C3" //图标颜色
                        },
                        emphasis: { //重点，强调时候的样式，即当鼠标悬停或点击上去的时候的拐点的样式
                            borderColor: '#92A7C3',
                            borderWidth: 2,
                            color: '#92A7C3'
                        }
                    },
                    connectNulls: true,
                    data: echartData.seriesData
                }]
            };
            myChart.setOption(option);
        }
    }, {
        key: 'recombineM',

        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        处理得到的数据的函数  处理月份和数据
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        value: function recombineM(data) {
            var echartData = {
                monthList: [],
                seriesData: []
            };
            if (data) {
                data.forEach(function (item) {
                    var month = item.date.split('-')[1];
                    if (month.indexOf('0') == 0) {
                        echartData.monthList.push(month.charAt(1) + '月');
                    } else {
                        echartData.monthList.push(month + '月');
                    }
                    echartData.seriesData.push(item.unitPrice);
                });
            }
            return echartData;
        }
    }]);

    return DetailController;
}(Controller);
/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
类的初始化
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


$(document).ready(function () {
    new DetailController();
});
//# sourceMappingURL=detail.min.js.map
