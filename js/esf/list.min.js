"use strict";

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return call && (typeof call === "object" || typeof call === "function") ? call : self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function, not " + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }

/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1. 项目名称：悟空找房h5
 2. 页面名称：esf/list(二手房列表)
 3. 作者：zhaohuagang@lifang.com
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
var ListController = function (_Controller) {
    _inherits(ListController, _Controller);

    function ListController() {
        _classCallCheck(this, ListController);

        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        加载相关页面组件逻辑
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        var _this = _possibleConstructorReturn(this, (ListController.__proto__ || Object.getPrototypeOf(ListController)).call(this));
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        类的初始化，继承控制器基类
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


        var self = _this;
        require(["../components/filter.min", "../components/conning-tower.min"], function (Filter) {
            // new ConningTower({                
            //     "moduleType" : "esf" ,
            //     "cityClick" : () => {
            //         alert("在二手房城市选择器中点选了城市") ;
            //     } ,
            //     "searchResultItemClick" : (data) => {
            //         alert(data) ;
            //     }
            // }) ;

            self.filter = new Filter({
                el: ".filter",
                houseType: 1,
                cityId: 43,
                near: false,
                longitude: 222,
                latitude: 234,
                distances: [{ value: "5000", text: "不限（智能范围）" }, { value: "500", text: "500米" }, { value: "1000", text: "1000米" }, { value: "2000", text: "2000米" }, { value: "5000", text: "5000米" }],
                controller: self,
                filterChanged: function filterChanged(result) {
                    this.total = 0;
                    this.count = 0;
                    console.log("筛选条件变了：", result);
                    var param = self.paramGenerator.generateParamObj(result);
                    self.param = param;
                    self.hideNoData();
                    self.hideNoMore();
                    self.fetchData(param, function (data) {
                        if (data.count != 0 && data.count <= self.pageSize) {
                            // 没有更多了
                            self.showNoMore();
                        }
                        self.createHouseList(data.data, data.count);
                        var qs = ParamGenerator.object2QueryString(param);
                        window.history.pushState(param, "", "./" + qs);
                    });
                }
            });
        });
        return _this;
    }

    return ListController;
}(Controller);
/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
类的初始化
-----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/


$(document).ready(function () {
    new ListController();
});
//# sourceMappingURL=list.min.js.map
