{"version":3,"sources":["components/webViewBridge.min.js"],"names":["define","isArray","o","Object","prototype","toString","call","connectWebViewJavascriptBridge","callback","window","WebViewJavascriptBridge","document","addEventListener","webViewJavascriptBridge","init","params","bridge","handlers","i","length","tmpHandler","registerHandler","name","data","responseCallback","errorResponseCallback","exception","alert","message","exec","service","action","Error","requestData","undefined","console","log"],"mappings":"AAAA,YAKAA,QAAO,WAuFH,QAASC,GAAQC,GACb,MAA6C,mBAAtCC,OAAOC,UAAUC,SAASC,KAAKJ,GAO1C,QAASK,GAA+BC,GAChCC,OAAOC,wBACPF,EAASE,yBAETC,SAASC,iBACL,+BACA,WACIJ,EAASE,2BAEb,GAnGZ,GAAIG,IACAC,KAAM,SAASC,GACXR,EAA+B,SAASS,GACpC,IASI,GAAID,EAAOE,SACP,GAAIhB,EAAQc,EAAOE,UACf,IAAK,GAAIC,GAAI,EAAGA,EAAIH,EAAOE,SAASE,OAAQD,IAAK,CAC7C,GAAIE,GAAaL,EAAOE,SAASC,EACjCF,GAAOK,gBAAgBD,EAAWE,KAAM,SAASC,EAAMC,EAAkBC,GACjEL,EAAWI,kBACXJ,EAAWI,iBAAiBD,GAG5BH,EAAWK,uBACXL,EAAWK,sBAAsBF,SAK7CP,GAAOK,gBAAgBN,EAAOE,SAASK,KAAM,SAASC,EAAMC,EAAkBC,GACtEV,EAAOE,SAASO,kBAChBT,EAAOE,SAASO,iBAAiBD,GAGjCR,EAAOE,SAASQ,uBAChBV,EAAOE,SAASQ,sBAAsBF,KAKxD,MAAOG,GACLC,MAAMD,EAAUE,aAK5BC,KAAM,SAASd,GACX,IAGI,IAAKA,EAAOe,UAAYf,EAAOgB,OAC3B,KAAM,IAAIC,OAAM,6BAKpB,IAAIF,GAAUf,EAAOe,QACjBC,EAAShB,EAAOgB,OAChBE,EAA6BC,QAAfnB,EAAOQ,QAAyBR,EAAOQ,KACrDC,EAAmBT,EAAOS,iBAC1BC,EAAwBV,EAAOU,qBAGnCf,yBAAwBmB,KAAKC,EAASC,EAAQE,EAAaT,EAAkBC,GAG/E,MAAOC,GAEL,GAAsB,mBAAXS,SAGN,KADDA,SAAQC,IAAI,8DAA+DV,EAAUE,QAASF,GACvFA,IAOnBnB,+BAAgCA,EA4BpC,OAAOM","file":"webViewBridge.min.js","sourcesContent":["/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------\n 1. 项目名称：App内嵌h5\n 2. 页面名称：common->webViewJavascriptBridge.js(js与native 交互的js)\n 3. 作者：yuxiaochen@lifang.com\n -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/\ndefine(function() {\n\n    /*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     定义native 交互交互对象\n     --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/\n    var webViewJavascriptBridge = {\n        init: function(params) {\n            connectWebViewJavascriptBridge(function(bridge) {\n                try {\n                    //定义默认的native message hanlder\n\n                    //由于ios没有注册初始message handler 所以此处无法init \n                    // bridge.init(function(message, responseCallback, errorResponseCallback) {\n                    //     console.log(\"native data: \" + message);\n                    // });\n\n                    //定义 js handlers\n                    if (params.handlers) {\n                        if (isArray(params.handlers)) {\n                            for (var i = 0; i < params.handlers.length; i++) {\n                                var tmpHandler = params.handlers[i];\n                                bridge.registerHandler(tmpHandler.name, function(data, responseCallback, errorResponseCallback) {\n                                    if (tmpHandler.responseCallback) {\n                                        tmpHandler.responseCallback(data);\n                                    }\n\n                                    if (tmpHandler.errorResponseCallback) {\n                                        tmpHandler.errorResponseCallback(data);\n                                    }\n                                });\n                            }\n                        } else {\n                            bridge.registerHandler(params.handlers.name, function(data, responseCallback, errorResponseCallback) {\n                                if (params.handlers.responseCallback) {\n                                    params.handlers.responseCallback(data);\n                                }\n\n                                if (params.handlers.errorResponseCallback) {\n                                    params.handlers.errorResponseCallback(data);\n                                }\n                            });\n                        }\n                    }\n                } catch (exception) {\n                    alert(exception.message);\n                }\n            });\n\n        },\n        exec: function(params) {\n            try {\n\n                //判断必传参数定义是否合法          \n                if (!params.service || !params.action) {\n                    throw new Error(\"service or action invalid.\");\n\n                }\n\n                //定义参数\n                var service = params.service;\n                var action = params.action;\n                var requestData = params.data == undefined ? {} : params.data;\n                var responseCallback = params.responseCallback;\n                var errorResponseCallback = params.errorResponseCallback;\n\n                //调用native 方法\n                WebViewJavascriptBridge.exec(service, action, requestData, responseCallback, errorResponseCallback);\n\n\n            } catch (exception) {\n\n                if (typeof console != 'undefined') {\n\n                    console.log(\"WebViewJavascriptBridge: WARNING: javascript handler threw.\", exception.message, exception);\n                     throw exception;\n\n                }\n\n            }\n\n        },\n        connectWebViewJavascriptBridge: connectWebViewJavascriptBridge\n    };\n\n    /*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     判断是否是一个数组，使用下面的方法也是完全可行的\n     --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/\n    function isArray(o) {\n        return Object.prototype.toString.call(o) === '[object Array]';\n        //return (typeof o == 'object' && o.constructor == Array) ;\n    }\n\n    /*--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------\n     创建connectWebViewJavascriptBridge 方法\n     --------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------*/\n    function connectWebViewJavascriptBridge(callback) {\n        if (window.WebViewJavascriptBridge) {\n            callback(WebViewJavascriptBridge)\n        } else {\n            document.addEventListener(\n                'WebViewJavascriptBridgeReady',\n                function() {\n                    callback(WebViewJavascriptBridge)\n                },\n                false\n            );\n        }\n    }\n\n    return webViewJavascriptBridge;\n})\n"]}