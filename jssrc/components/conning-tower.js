/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1. 项目名称：悟空找房h5
 2. 页面名称：components -> conning-tower(列表页司令塔，包括返回、搜索、汉堡菜单等信息)
 3. 作者：zhaohuagang@lifang.com
 4. 备注：
    这里面定位需要用到的几个缓存key及缓存类型：
    1). this.moduleType +"VisitedCityId" , this.moduleType +"VisitedCityName" , this.moduleType +"VisitedCityPinyin"，this.moduleType +"VisitedCityChina"，表示用户最后一次访问的当前moduleType的城市  使用cookie
    2). this.moduleType +"SelectedCityId" , this.moduleType +"SelectedCityName" , this.moduleType +"SelectedCityPinyin"，this.moduleType +"SelectedCityChina"，表示用户选择的城市  使用cookie
    2). locationCityId , locationCityName , locationCityPinyin , locationCityChina  , locationLongitude , locationLatitude，表示定位到的城市及经纬度  使用sessionStorage，因为会话
        结束后这个定位信息用处就不大了    
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
 class ConningTower {
     constructor({ moduleType , cityClick = $.noop , searchResultItemClick = $.noop }) {
         this.moduleType = moduleType ;  //模块类型，可以是：xf | esf | rent
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        几个api地址的配置
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/       
         this.searchApiUrl = "/api/common/acWord" ;  //搜索用的接口地址
         this.businessCityApiUrl = "/api/common/businessCity" ;  //获取业务开通城市接口地址
         this.getCityLolaApiUrl = "/api/common/getCityByLatLon" ;  //通过经纬度反查城市接口地址 
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        几个接口方法 
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
         this.cityClick = cityClick ;  //城市选择器中城市点击接口事件
         this.searchResultItemClick = searchResultItemClick ;  //搜索结果选项点击
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        事件绑定
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
         this.addEventListener() ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        发起定位
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.location() ;        
     }     
     /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    组件相关dom节点事件绑定
     -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
     addEventListener() {
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击城市选择入口弹出城市选择器并根据是否有了数据来决定是否需要请求接口渲染
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".conning-tower dl dt").click(() => {
            this.popCitySelector() ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        未开通及招商场景中切换城市链接点击
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".notopen-investment .change").click(() => {
            $(".notopen-investment").addClass("hidden").removeClass("visible") ;
            this.popCitySelector() ;
        }) ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击汉堡菜单弹出子菜单
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".conning-tower .hamburg-menu").click(() => {
            $(document.body).css({ "overflow-y" : "hidden" }) ;  //滚动条隐藏
            $(".navigator-mask").fadeIn(100) ;
            $(".navigator-pop").animate( {
                right : 0
            } , 100 ) ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击子菜单遮罩关闭子菜单
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".navigator-mask").click(() => {
            $(document.body).css({ "overflow-y" : "auto" }) ;  //如果有滚动条就显示  
            $(".navigator-mask").fadeOut(100) ;
            $(".navigator-pop").animate( {
                right : "-200px"
            } , 100 ) ;              
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击返回按钮回到假的搜索场景
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".conning-tower .back").click(() => {
            history.back() ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击假的搜索区域出现真的搜索
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".conning-tower dl dd").click(() => {
            $(".substitute-mask").show(50) ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        真搜索区域返回按钮事件监听
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".substitute-mask .search-substitute .back").click(() => {
            $(".substitute-mask").hide(50) ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        真搜索区域清除输入图标事件监听
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".substitute-mask .search-substitute .input-section .icon-close").click(() => {
            $(".substitute-mask .search-substitute .input-section input").val("") ;
            $(".substitute-mask .list").empty() ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        pop菜单中的下载APP菜单事件监听
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".navigator-pop .app-download").click(() => {
            nativeSchema.loadSchema({               
                schema : "external_call"  ,  // 通过NN打开某个链接
                protocal : "wkzf" , //schema头协议，实际情况填写
                loadWaiting : "1500" , //发起唤醒请求后，会等待loadWaiting时间，超时则跳转到failUrl，默认3000ms                
                failUrl : "https://m.wkzf.com/download/transit?from=esfList" ,  //唤起失败时的跳转链接，默认跳转到下载页
                // apk信息,请根据实际情况填写
                apkInfo : {
                    PKG : "com.wukong.ua" ,
                    CATEGORY : "android.intent.category.DEFAULT" ,
                    ACTION : "android.intent.action.VIEW"
                }
            }) ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        真搜索区域输入监听
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        let $input = $(".substitute-mask .search-substitute .input-section input") ;
        $input.keyup(() => {
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            先清除结果
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            $(".substitute-mask .list").empty() ;
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            根据输入的关键词来决定是否需要发请求
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            let currentValue = $input.val() ? $.trim($input.val()) : "" ;                    
            if( ! currentValue || currentValue == $input.data("last")) return ;  //说明没有输入内容或者输入内容和上次一致，都不需要发起请求
            let paramsMapper = { "xf" : "newhouselist" , "esf" : "oldhouselist" , "rent" : "renthouselist" } ;            
            this.request({ 
                apiUrl : this.searchApiUrl , 
                requestData : { "key" : currentValue , "pageName" :  paramsMapper[this.moduleType] , "cityId" : parseInt( $("#visitedCityId").val() , 10 ) } , 
                success : (result) => {                    
                    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    如果搜索无结果绘制相应节点
                    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                    let resultMapper = { "xf" : "newHouse" , "esf" : "secondHouse" , "rent" : "secondHouse" } ;
                    if( result.data[resultMapper[this.moduleType] + "Total"] === 0 ) {
                        $(".substitute-mask .list").append("<li class=\"no-data\"><dl><dt>未找到该地址，请重新搜索</dt><dd>您可以更换其他关键字再试一次</dd></dl></li>") ;
                    }
                    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    有结果的绘制
                    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                    else {
                        result.data[resultMapper[this.moduleType] + "List"].forEach((source) => {
                            let $li = $(document.createElement("LI")) ;
                            for(let key in source) {
                                $li.attr("data-" + key , source[key] ) ;
                            }
                            $li.append("<dl><dt>" + source.estateDesc + "</dt><dd>" + source.address + "</dd></dl>") ;
                            $(".substitute-mask .list").append($li) ;
                        }) ;
                    }
                    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    最后进行事件绑定
                    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
                    $(".substitute-mask .list li").click((event) => {
                        let $item = $(event.currentTarget) ;
                        if($item.hasClass("no-data")) return ;                                           
                        this.searchResultItemClick($item.data()) ;
                    }) ;                   
                    
                } 
            }) ; 
            $input.data("last" , currentValue) ; //最后将当前值记录到最后一次搜索关键词里面
        }) ;
        
     }
     /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    本组件ajax请求封装
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    request({ apiUrl , requestData , success = $.noop }) {
        try {
            $.ajax({
                url : apiUrl ,                    
                data : requestData ,
                dataType : "json" ,                            
                error : function(e) {
                    $.tips( "调用数据接口：" + apiUrl + " 失败！请测试您的数据接口！" , 3 ) ;                                   
                } ,
                success : function(data) {                
                    if (data.status.toString() === "1")  {
                        //获取到接口数据，进行处理
                        success(data) ;
                    }
                    else $.tips( data.message , 3 ) ;
                }
            }) ;
        }
        catch(e) {
            $.tips( "错误名称：" + e.name + "\n错误描述：" + e.message , 3 ) ;
        }
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    等渲染好城市选择器后进行的事件委托
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
     citySelectorEventDelegate() {         
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------         
        根据tabs-handle的显示状态决定tabs-frame的margin-top值
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        let frameMarginTop = $(".city-selector .caption .tabs-handle").is(":visible") ? "72px" : "28px" ;
        $(".city-selector .tabs-frame").css({ "margin-top" : frameMarginTop }) ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------         
        城市选择器中根据tabs-handle里面哪个句柄被选中来确定哪个tabs-frame显示
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/        
        $(".city-selector .tabs-frame." + $(".city-selector .caption .tabs-handle li.on").eq(0).data("sign")).show() ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        城市选择器中tabs-handle的点击
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
        let $tabsHandles = $(".city-selector .caption .tabs-handle li") ;
        $tabsHandles.click(function(){
            $tabsHandles.removeClass("on") ;
            $(this).addClass("on") ;
            $(".city-selector .tabs-frame").hide() ;
            $(".city-selector .tabs-frame." + $(this).data("sign")).show() ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        城市选择器中每个城市被点击后干什么?
        1. 设置selected系列 cookie
        2. 接着执行接口方法
        3. 如果是当前城市就什么都不做，否则就然后直接跳转新城市
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".city-selector .tabs-frame a").click((event) => {
            $.cookie( this.moduleType + "SelectedCityId" , $(event.target).data("cityid") ,  { "path" : "/" } ) ; 
            $.cookie( this.moduleType + "SelectedCityName" , $(event.target).text() ,  { "path" : "/" } ) ;
            $.cookie( this.moduleType + "SelectedCityPinyin" , $(event.target).data("pinyin") ,  { "path" : "/" } ) ;
            $.cookie( this.moduleType + "SelectedCityChina" , $(event.target).data("china") ,  { "path" : "/" } ) ;          
            this.cityClick() ;
            $(".city-selector").hide() ;
            if(parseInt( $(event.target).data("cityid") , 10 ) !== parseInt($("#visitedCityId").val() , 10 )) window.location.href = this.combineUrl($(event.target).data("pinyin")) ;
        }) ;
     }
     /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    对接口拿到的业务开通城市进行处理
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    filterBusinessCity(data) {
        let typeMapper = { "esf" : 1 , "rent" : 2 , "xf" : 3 } ;
        let typeValue = typeMapper[this.moduleType] ;
        let result = { "domestic" : {} , "overseas" : {} } ;
        data && data.domesticCityList && data.domesticCityList.forEach((city) => {
            let has = false ;
            city.businessList && city.businessList.forEach((business) => {
                if(business.businessId === typeValue) has = true ;
            }) ;
            if(has) {
                let shoupin = city.pinyin.charAt(0).toUpperCase() ;
                if( ! result.domestic.hasOwnProperty(shoupin)) result.domestic[shoupin] = [] ;
                result.domestic[shoupin].push({ "cityId" : city.cityId , "cityName" : city.cityName , "pinyin" : city.pinyin , "cityType" : city.cityType }) ;
            }
        }) ;
        data && data.overseaCityList && data.overseaCityList.forEach((city) => {
            let has = false ;
            city.businessList && city.businessList.forEach((business) => {
                if(business.businessId === typeValue) has = true ;
            }) ;
            if(has) {
                let shoupin = city.pinyin.charAt(0).toUpperCase() ;
                result.overseas[shoupin].push({ "cityId" : city.cityId , "cityName" : city.cityName , "pinyin" : city.pinyin , "cityType" : city.cityType }) ;
            } 
        }) ;
        return result ;
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    发起定位
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    location() {        
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        首先要去判断是否有过浏览当前moduleType的页面，如果
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        if($.cookie(this.moduleType + "VisitedCityId")) {
            if(parseInt( $.cookie(this.moduleType + "VisitedCityId") , 10 ) !== parseInt( $("#visitedCityId").val() , 10 )) {
                //如果当前城市不是用户选择的城市才会要跳转
                if( parseInt( $.cookie(this.moduleType + "SelectedCityId") , 10 ) !== parseInt( $("#visitedCityId").val() , 10 ) ) window.location.href = this.combineUrl($.cookie(this.moduleType + "VisitedCityPinyin")) ;
            }
            else {
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                为了保证cookie的统一写入口，页面同步渲染的时候将城市信息放到页面隐藏域中，然后由FE来写到 cookie中
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                this.setVisitedCityCache() ;
            }
            return ;  //只要是浏览过当页，都不会再走定位
        }
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        检查浏览器是否支持地理定位
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        if( ! navigator.geolocation ) {
            $.tips( "您的浏览器不支持定位地理位置" , 3 ) ;            
            return ;
        }
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        定义定位选项
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        let geoOpts = {
            enableHighAccuracy : false ,   //表示是否高精度可用，为Boolean类型，默认为false，如果开启，响应时间会变慢，同时，在手机设备上会用掉更多的流量，也就是money了。
            maximumAge : 0 , //表示应用程序的缓存时间。单位毫秒，默认是0，意味着每次请求都是立即去获取一个全新的对象内容。
            timeout : 10 * 1000  //表示等待响应的最大时间，默认是0毫秒，表示无穷时间。
        } ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        开始发起定位
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        navigator.geolocation.getCurrentPosition( (position) => {
            let latitude = position.coords.latitude ;
            let longitude = position.coords.longitude ;            
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            往cookie里面写经纬度
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            $.cookie("locationLatitude" , latitude , { path : "/" , expires : 365 * 24 * 60 } ) ;
            $.cookie("locationLongitude" , longitude , { path : "/" , expires : 365 * 24 * 60 } ) ;              
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            根据经纬度反查城市信息
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            this.request({ 
                apiUrl : this.getCityLolaApiUrl , 
                requestData : { "latitude" : latitude , "longitude" : longitude } , 
                success : (result) => {
                    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    写入几个缓存
                    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                    $.cookie("locationCityId" , result.data.cityId , { path : "/" , expires : 365 * 24 * 60 } ) ;
                    $.cookie("locationCityName" , result.data.cityName , { path : "/" , expires : 365 * 24 * 60 } ) ;
                    $.cookie("locationCityPinyin" , result.data.cityPinyin , { path : "/" , expires : 365 * 24 * 60 } ) ; 
                    $.cookie("locationCityChina" , result.data.china , { path : "/" , expires : 365 * 24 * 60 } ) ;                    
                    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    直接跳转到对应城市结束
                    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                    if( parseInt( result.data.cityId , 10 ) !== parseInt( $("#visitedCityId").val() , 10 ) )  window.location.href = this.combineUrl(result.data.cityPinyin) ;
                    else {
                        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        为了保证cookie的统一写入口，页面同步渲染的时候将城市信息放到页面隐藏域中，然后由FE来写到 cookie中
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                        this.setVisitedCityCache() ;
                    }                    
                } 
            }) ;                       
        } , ( error ) => {
            switch(error.code) {
                case error.PERMISSION_DENIED :  // 用户阻止了授权
                this.popCitySelector() ;
                break ;

                case error.POSITION_UNAVAILABLE :  //定位信息无效
                this.orientateTimeout() ;
                break ;

                case error.TIMEOUT :  //定位超时
                this.orientateTimeout() ;
                break ;

                case error.UNKNOWN_ERROR :  //其他不可预知的错误
                this.orientateTimeout() ;
                break ;
            }
        } , geoOpts ) ;

    }
    
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    弹出城市选择器
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    popCitySelector() {
        $(".city-selector").slideDown(200) ;
        if($(".city-selector .tabs-frame").children().length) return ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        请求业务城市数据并绘制，绘制完后绑定事件
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.request({ 
            apiUrl : this.businessCityApiUrl , 
            requestData : { } , 
            success : (result) => {                    
                let cities = this.filterBusinessCity(result.data) ;  //取出所有满足条件的城市清单                    
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                绘制tabs-handle
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                let $ul = "<ul class=\"tabs-handle\"><li class=\"on\" data-sign=\"domestic\">国内</li><li data-sign=\"overseas\">国际</li></ul>" ;
                if( ! Object.keys(cities.domestic).length || ! Object.keys(cities.overseas).length) {                        
                    if( Object.keys(cities.domestic).length ) $ul = "<ul class=\"tabs-handle\" style=\"display : none\"><li class=\"on\" data-sign=\"domestic\">国内</li><li data-sign=\"overseas\">国际</li></ul>" ;
                    else $ul = "<ul class=\"tabs-handle\" style=\"display : none\"><li data-sign=\"domestic\">国内</li><li class=\"on\" data-sign=\"overseas\">国际</li></ul>" ;
                }                   
                $(".city-selector .caption").append($ul) ;
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                绘制tabs-frame
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/                    
                let $domesticFrame = $(document.createElement("DIV")).addClass("tabs-frame domestic") ;
                if($.cookie("locationCityName") && $.cookie("locationCityChina")) $domesticFrame.append("<span>定位城市</span><a data-cityid=\"" + $.cookie("locationCityId") + "\" data-pinyin=\"" + $.cookie("locationCityPinyin") + "\" data-china=\"" + $.cookie("locationCityChina") + "\">" + $.cookie("locationCityName") + "</a>") ;
                if( Object.keys(cities.domestic).length ) {
                    for( let key in cities.domestic ) {
                        $domesticFrame.append("<span>" + key + "</span>") ;
                        cities.domestic[key].forEach((city) => {
                            $domesticFrame.append("<a data-cityid=\"" + city.cityId + "\" data-pinyin=\"" + city.pinyin + "\" data-china=\"" + city.cityType + "\">" + city.cityName + "</a>") ;
                        }) ;
                    }
                }
                $(".city-selector").append($domesticFrame) ;

                let $overseasFrame = $(document.createElement("DIV")).addClass("tabs-frame overseas") ;
                if($.cookie("locationCityName") && ! $.cookie("locationCityChina")) $domesticFrame.append("<span>定位城市</span><a data-cityid=\"" + $.cookie("locationCityId") + "\" data-pinyin=\"" + $.cookie("locationCityPinyin") + "\"  data-china=\"" + $.cookie("locationCityChina") + "\">" + $.cookie("locationCityName") + "</a>") ;
                if( Object.keys(cities.overseas).length ) {
                    for( let key in cities.overseas ) {
                        $overseasFrame.append("<span>" + key + "</span>") ;
                        cities.overseas[key].forEach((city) => {
                            $overseasFrame.append("<a data-cityid=\"" + city.cityId + "\" data-pinyin=\"" + city.pinyin + "\" data-china=\"" + city.cityType + "\">" + city.cityName + "</a>") ;
                        }) ;
                    }
                }
                $(".city-selector").append($overseasFrame) ;
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                最后给dom节点绑定事件
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                this.citySelectorEventDelegate() ;
            } 
        }) ; 
    }    
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    定位信息无效，定位超时，其他不可预知的错误情况下的处理
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    orientateTimeout() {
        $.modal({
            "id" : "orientateTimeoutDialog" ,
            "title" : "" ,      
            "content" : "定位失败<br>请手动选择您的城市" ,
            "buttons" : [
                { "text" : "去选择" , "className" : "goto-select-city" , "clickCallback" : () => {
                        $.modal.close("orientateTimeoutDialog") ;
                        this.popCitySelector() ;
                    } 
                } 
            ]
        }) ;
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    为了保证cookie的统一写入口，页面同步渲染的时候将城市信息放到页面隐藏域中，然后由FE来写到 cookie中
    这个cookie的作用是为了满足prd里面要求的：有上次浏览城市信息就不要定位了
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    setVisitedCityCache() {        
        $.cookie(this.moduleType + "VisitedCityId" , $("#visitedCityId").val() , { "path" : "/" , expires : 365 * 24 * 60 } ) ;
        $.cookie(this.moduleType + "VisitedCityName" , $("#visitedCityName").val() , { "path" : "/" , expires : 365 * 24 * 60 } ) ;
        $.cookie(this.moduleType + "VisitedCityPinyin" , $("#visitedCityPinyin").val() , { "path" : "/" , expires : 365 * 24 * 60 } ) ;
        $.cookie(this.moduleType + "VisitedCityChina" , $("#visitedCityChina").val() , { "path" : "/" , expires : 365 * 24 * 60 } ) ;
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    通过城市拼音和模块类型组织列表页面跳转地址
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    combineUrl(cityPinyin) {
        let urlArray = window.location.href.split("/") ;
        urlArray[3] = cityPinyin ;
        return urlArray.join("/") ;
    }
    
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    整个组件定义结束
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
 }
