/*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
 1. 项目名称：悟空找房h5
 2. 页面名称：components -> conning-tower(列表页司令塔，包括返回、搜索、汉堡菜单等信息)
 3. 作者：zhaohuagang@lifang.com
 4. 备注：
    这里面定位需要用到的几个缓存key及缓存类型：
    1). "visitedCityId" , "visitedCityName" , "visitedCityPinyin"，"visitedCityChina"，表示用户最后一次访问的当前moduleType的城市  使用cookie
    2). "selectedCityId" , "selectedCityName" , "selectedCityPinyin"，"selectedCityChina"，表示用户选择的城市  使用cookie
    3). locationLongitude , locationLatitude 定位的经纬度，这个一定要用cookie，因为埋点里面传递的值是从这里取的      
5. 待完成任务：
    1). setSearchCache方法写好了，判重还没有验证，在用户点击搜索结果项或者搜索表单提交的时候需要执行，只不过搜索表单提交相当于选择了搜索出来的第一条记录
    2). 搜索框获得焦点或者keyup但是keywords为空的时候需要将搜索历史绘制出来
 -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
 class ConningTower {
     constructor({ bigDataUtil , moduleType , cityClick = $.noop , searchResultItemClick = $.noop , locationCallback = $.noop }) {
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        大数据埋点的工具引进来
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
        this.bigDataUtil = bigDataUtil ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        模块类型，可以是：xf | esf | rent
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/  
         this.moduleType = moduleType ; 
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        几个api地址的配置
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
         this.apiUrl = {
             "search" : "/api/common/acWord" ,   //搜索用的接口地址
             "businessCity" : "/api/common/businessCity" ,   //获取业务开通城市接口地址
             "getCityByLola" : "/api/common/getCityByLatLon"  //通过经纬度反查城市接口地址
         } ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        几个接口方法 
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
         this.cityClick = cityClick ;  //城市选择器中城市点击接口事件
         this.searchResultItemClick = searchResultItemClick ;  //搜索结果选项点击
         this.locationCallback = locationCallback ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        几个状态值
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.states = {
            "locationStage" : 0 ,  //定位阶段： 0:还没有发起定位 | 1:开始定位 | 2:定位结束
            "locationMessage" : null ,  //定位提示语，{城市}/正在定位中.../定位失败/定位服务暂未开启
            "locationFailCause" : null , //定位失败原因
            "locationCityId" : null ,
            "locationCityName" : null ,
            "locationCityPinyin" : null ,
            "locationCityChina" : null
        } ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        页面常量
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts = {
            "visitedCityId" : $("#visitedCityId").val() ,
            "visitedCityName" : $("#visitedCityName").val() ,
            "visitedCityPinyin" : $("#visitedCityPinyin").val() ,
            "visitedCityChina" : $("#visitedCityChina").val() ,

            "$conningTowerCitySelectEntrance" : $(".conning-tower dl dt") ,  //点击城市选择入口
            "$investment" : $(".notopen-investment") ,  //未开通及招商弹层
            "$investmentCitySwitch" : $(".notopen-investment .change") ,  //未开通及招商场景中切换城市链接
            "$hamburgMenu" : $(".conning-tower .hamburg-menu") ,  //汉堡菜单
            "$appDownload" : $(".navigator-pop .app-download") ,   //点击汉堡菜单弹出的菜单中app下载按钮
            "$navigatorMask" : $(".navigator-mask") ,  //pop菜单遮罩
            "$navigatorPop" : $(".navigator-pop") ,  //点击汉堡菜单弹出的菜单
            "$conningTowerBack" : $(".conning-tower .back") ,  //司令塔假的搜索区域返回按钮
            "$substituteMask" : $(".substitute-mask") ,  //搜索替身遮罩
            "$searchInputBox" : $(".substitute-mask .search-substitute .input-section input") ,  //真搜索区域的搜索框
            "$searchBack" : $(".substitute-mask .search-substitute .back") ,  //真搜索区域返回按钮
            "$clearKeywords" : $(".substitute-mask .search-substitute .input-section .icon-close") , //清除搜索关键词
            "$clearHistory" : $(".substitute-mask .list-container .clear-history") ,  //清除搜索历史按钮
            "$searchResultList" : $(".substitute-mask .list-container .list") ,  //搜索结果列表
            "$searchResultListAssistant" : $(".substitute-mask .list-container div") ,  //搜索结果列表助手，包括上面的"搜索历史"title和下面的清除历史按钮
            "$searchForm" : $(".substitute-mask .search-substitute form") ,  //搜索表单
            "$citySelector" : $(".city-selector")  //城市选择弹层
        } ;

         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        侦测是否有过搜索结果点击行为
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
         this.detectSearchResultClick() ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        事件绑定
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
         this.addEventListener() ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        发起定位
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.location() ;        
     }     
     /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    组件相关dom节点事件绑定
     -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
     addEventListener() {
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击城市选择入口弹出城市选择器并根据是否有了数据来决定是否需要请求接口渲染
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$conningTowerCitySelectEntrance.click(() => {
            this.popCitySelector() ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        未开通及招商场景中切换城市链接点击
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$investmentCitySwitch.click(() => {
            this.consts.$investment.addClass("hidden").removeClass("visible") ;
            this.popCitySelector() ;
        }) ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击汉堡菜单弹出子菜单
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$hamburgMenu.click(() => {
            $(document.body).css({ "overflow-y" : "hidden" }) ;  //滚动条隐藏
            this.consts.$navigatorMask.fadeIn(100) ;
            this.consts.$navigatorPop.animate( {
                right : 0
            } , 100 ) ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击子菜单遮罩关闭子菜单
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$navigatorMask.click(() => {
            $(document.body).css({ "overflow-y" : "auto" }) ;  //如果有滚动条就显示  
            this.consts.$navigatorMask.fadeOut(100) ;
            this.consts.$navigatorPop.animate( {
                right : "-200px"
            } , 100 ) ;              
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击司令塔家搜索返回按钮回退
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$conningTowerBack.click(() => {
            history.back() ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        点击假的搜索区域出现真的搜索并将真的搜索框 focus
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".conning-tower dl dd").click(() => {
            this.consts.$substituteMask.show(50) ;
            this.consts.$searchInputBox.trigger("focus") ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        真搜索区域返回按钮事件监听
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$searchBack.click(() => {
            this.consts.$substituteMask.hide(50) ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        真搜索区域清除输入图标事件监听
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$clearKeywords.click(() => {
            this.consts.$searchInputBox.val("").trigger("focus") ; 
            this.consts.$clearKeywords.hide() ;      
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        清除搜索历史按钮事件监听       
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
        this.consts.$clearHistory.click(() => {            
            this.consts.$searchResultList.empty() ;
            this.consts.$searchResultListAssistant.hide(100) ;
            delete window.localStorage[this.moduleType + "SearchHistory" ] ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        pop菜单中的下载APP菜单事件监听
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$appDownload.click(() => {
            nativeSchema.loadSchema({               
                schema : "external_call"  ,  // 通过NN打开某个链接
                protocal : "wkzf" , //schema头协议，实际情况填写
                loadWaiting : "1500" , //发起唤醒请求后，会等待loadWaiting时间，超时则跳转到failUrl，默认3000ms                
                failUrl : "https://m.wkzf.com/download/transit?from=esfList" ,  //唤起失败时的跳转链接，默认跳转到下载页
                // apk信息,请根据实际情况填写
                apkInfo : {
                    PKG : "com.wukong.ua" ,
                    CATEGORY : "android.intent.category.DEFAULT" ,
                    ACTION : "android.intent.action.VIEW"
                }
            }) ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        真搜索区域输入监听以及focus监听，如果没有输入值就应该出搜索历史
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/        
        this.consts.$searchInputBox.on("keyup focus" , () => {
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            取得关键词内容
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            let currentValue = this.consts.$searchInputBox.val() ? $.trim(this.consts.$searchInputBox.val()) : "" ;
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            如果关键词有值，就要显示清除按钮
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            let displayStatus = currentValue ? "block" : "none" ;
            this.consts.$clearKeywords.css({ "display" : displayStatus }) ;
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            如果关键词没有改变什么也不做
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            if( currentValue && currentValue == this.consts.$searchInputBox.attr("data-last")) return ;
            else {
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                先清除结果
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                this.consts.$searchResultList.empty() ;
                this.consts.$searchResultListAssistant.hide(100) ;
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                如果关键词为空就要绘制搜索历史并直接返回
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                if( ! currentValue ) {
                    let searchHistory = window.localStorage[this.moduleType + "SearchHistory" ] ;
                    searchHistory = searchHistory ? JSON.parse(searchHistory) : [] ;
                    searchHistory && this.renderSearchResult( { items : searchHistory , history : true }) ;
                    this.consts.$searchInputBox.attr("data-last" , currentValue) ; 
                    return ;
                }
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                否则就发起请求
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/            
                let paramsMapper = { "xf" : "newhouselist" , "esf" : "oldhouselist" , "rent" : "renthouselist" } ;            
                this.request({ 
                    apiUrl : this.apiUrl.search , 
                    requestData : { "key" : currentValue , "pageName" :  paramsMapper[this.moduleType] , "cityId" : parseInt( this.consts.visitedCityId , 10 ) } , 
                    success : (result) => {                    
                        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        如果搜索无结果绘制相应节点
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                        if( result.data["secondHouseTotal"] === 0 ) {
                            $(".substitute-mask .list-container .list").empty().append("<li class=\"no-data\"><dl><dt>未找到该地址，请重新搜索</dt><dd>您可以更换其他关键字再试一次</dd></dl></li>") ;
                        }
                        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                        有结果的绘制
                        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                        else this.renderSearchResult({ "items" : result.data["secondHouseList"] , "history" : false }) ;   
                    } 
                }) ; 
                this.consts.$searchInputBox.attr("data-last" , currentValue) ;  //最后将当前值记录到最后一次搜索关键词里面
            }    
            
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        搜索表单提交相当于点击了第一个搜索结果项并阻止默认表单提交行为
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$searchForm.submit((event) => {
            $(".substitute-mask .list-container .list li").eq(0).trigger("click") ;
            event.preventDefault() ;
        }) ;
        
     }
     /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    本组件ajax请求封装
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    request({ apiUrl , requestData , success = $.noop }) {
        try {
            $.ajax({
                url : apiUrl ,                    
                data : requestData ,
                dataType : "json" ,                            
                error : function(e) {
                    $.tips( "调用数据接口：" + apiUrl + " 失败！请测试您的数据接口！" , 3 ) ;                                   
                } ,
                success : function(data) {                
                    if (data.status.toString() === "1")  {
                        //获取到接口数据，进行处理
                        success(data) ;
                    }
                    else $.tips( data.message , 3 ) ;
                }
            }) ;
        }
        catch(e) {
            $.tips( "错误名称：" + e.name + "\n错误描述：" + e.message , 3 ) ;
        }
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    等渲染好城市选择器后进行的事件委托
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
     citySelectorEventDelegate() {         
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------         
        根据tabs-handle的显示状态决定tabs-frame的margin-top值
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        let frameMarginTop = $(".city-selector .caption .tabs-handle").is(":visible") ? "72px" : "28px" ;
        $(".city-selector .tabs-frame").css({ "margin-top" : frameMarginTop }) ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------         
        城市选择器中根据tabs-handle里面哪个句柄被选中来确定哪个tabs-frame显示
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/        
        $(".city-selector .tabs-frame." + $(".city-selector .caption .tabs-handle li.on").eq(0).data("sign")).show() ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        城市选择器中tabs-handle的点击
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
        let $tabsHandles = $(".city-selector .caption .tabs-handle li") ;
        $tabsHandles.click(function(){
            $tabsHandles.removeClass("on") ;
            $(this).addClass("on") ;
            $(".city-selector .tabs-frame").hide() ;
            $(".city-selector .tabs-frame." + $(this).data("sign")).show() ;
        }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        城市选择器中每个城市被点击后干什么?
        1. 设置selected系列 cookie
        2. 接着执行接口方法
        3. 如果是当前城市就什么都不做，否则就然后直接跳转新城市
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $(".city-selector .tabs-frame a").click((event) => {            
            this.swapCity($(event.currentTarget)) ;
        }) ;
     }
     /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    对接口拿到的业务开通城市进行处理
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    swapCity($handler) {
        if( ! $handler.attr("data-cityid")) return ;        
        $.cookie( "selectedCityId" , $handler.data("cityid") ,  { "path" : "/" } ) ; 
        $.cookie( "selectedCityName" , $handler.text() ,  { "path" : "/" } ) ;
        $.cookie( "selectedCityPinyin" , $handler.data("pinyin") ,  { "path" : "/" } ) ;
        $.cookie( "selectedCityChina" , $handler.data("china") ,  { "path" : "/" } ) ;          
        this.cityClick() ;
        this.retractCitySelector() ;
        if( $handler.data("cityid") != this.consts.visitedCityId ) window.location.href = this.combineUrl( $handler.data("pinyin") ) ;
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    对接口拿到的业务开通城市进行处理
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    filterBusinessCity(data) {
        let typeMapper = { "esf" : 1 , "rent" : 2 , "xf" : 3 } ;
        let typeValue = typeMapper[this.moduleType] ;
        let result = { "domestic" : {} , "overseas" : {} } ;
        data && data.domesticCityList && data.domesticCityList.forEach((city) => {
            let has = false ;
            city.businessList && city.businessList.forEach((business) => {
                if(business.businessId === typeValue) has = true ;
            }) ;
            if(has) {
                let shoupin = city.pinyin.charAt(0).toUpperCase() ;
                if( ! result.domestic.hasOwnProperty(shoupin)) result.domestic[shoupin] = [] ;
                result.domestic[shoupin].push({ "cityId" : city.cityId , "cityName" : city.cityName , "pinyin" : city.pinyin , "cityType" : city.cityType }) ;
            }
        }) ;
        data && data.overseaCityList && data.overseaCityList.forEach((city) => {
            let has = false ;
            city.businessList && city.businessList.forEach((business) => {
                if(business.businessId === typeValue) has = true ;
            }) ;
            if(has) {
                let shoupin = city.pinyin.charAt(0).toUpperCase() ;
                if( ! result.overseas.hasOwnProperty(shoupin)) result.overseas[shoupin] = [] ;
                result.overseas[shoupin].push({ "cityId" : city.cityId , "cityName" : city.cityName , "pinyin" : city.pinyin , "cityType" : city.cityType }) ;
            } 
        }) ;
        return result ;
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    发起定位
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    location() {              
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        首先要去判断是否有过浏览H5的页面，如果
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        if( $.cookie("visitedCityId") && $.cookie("visitedCityId") != this.consts.visitedCityId && $.cookie("selectedCityId") && $.cookie("selectedCityId") != this.consts.visitedCityId ) {
            //alert("先前访问过H5城市，并且选择过城市，这两个城市值都不等于路由城市，所以跳转到先前访问城市") ;           
            window.location.href = this.combineUrl($.cookie("visitedCityPinyin")) ;
            return ;
        }
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        为了保证cookie的统一写入口，页面同步渲染的时候将城市信息放到页面隐藏域中，然后由FE来写到 cookie中
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.setVisitedCityCache() ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        检查浏览器是否支持地理定位
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        if( ! navigator.geolocation ) {
            $.tips( "您的浏览器不支持定位地理位置" , 3 ) ;            
            return ;
        }
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        改写状态
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.states.locationStage = 1 ;
        this.states.locationMessage = "正在定位中..." ;        
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        定义定位选项
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        let geoOpts = {
            enableHighAccuracy : false ,   //表示是否高精度可用，为Boolean类型，默认为false，如果开启，响应时间会变慢，同时，在手机设备上会用掉更多的流量，也就是money了。
            maximumAge : 0 , //表示应用程序的缓存时间。单位毫秒，默认是0，意味着每次请求都是立即去获取一个全新的对象内容。
            timeout : 10 * 1000  //表示等待响应的最大时间，默认是0毫秒，表示无穷时间。
        } ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        开始发起定位
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        navigator.geolocation.getCurrentPosition( (position) => {
            let latitude = position.coords.latitude ;
            let longitude = position.coords.longitude ; 
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            改写状态
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            this.states.locationStage = 2 ;
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            往cookie里面写经纬度
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            $.cookie("locationLatitude" , latitude , { path : "/" , expires : 365 * 24 * 60 } ) ;
            $.cookie("locationLongitude" , longitude , { path : "/" , expires : 365 * 24 * 60 } ) ;
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            执行定位回调
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            this.locationCallback({ "latitude" : latitude , "longitude" : longitude }) ;              
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            根据经纬度反查城市信息
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            this.request({ 
                apiUrl : this.apiUrl.getCityByLola , 
                requestData : { "latitude" : latitude , "longitude" : longitude } , 
                success : (result) => {
                    this.states.locationMessage = result.data.cityName ;
                    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    写入几个状态值
                    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                    this.states.locationCityId = result.data.cityId ;
                    this.states.locationCityName = result.data.cityName ;
                    this.states.locationCityPinyin = result.data.cityPinyin ;
                    this.states.locationCityChina = result.data.china ;                                 
                    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    城市选择弹层定位城市改写
                    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                    let $locationCity = $(document.createElement("A")).addClass("location-city").attr("data-cityid" , this.states.locationCityId).attr("data-pinyin" , this.states.locationCityPinyin).attr("data-china" , this.states.locationCityChina).text(this.states.locationCityName) ;
                    $locationCity.click((event) => {
                        this.swapCity($(event.currentTarget)) ;
                    }) ;
                    //$(".city-selector .tabs-frame .location-city").replaceWith("<a class=\"location-city\" data-cityid=\"" + this.states.locationCityId + "\" data-pinyin=\"" + this.states.locationCityPinyin + "\" data-china=\"" + this.states.locationCityChina + "\">" + this.states.locationCityName + "</a>") ;
                    $(".city-selector .tabs-frame .location-city").replaceWith($locationCity) ;
                    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                    如果用户没有选择城市并且定位到的城市不是当前路由城市才会跳转到定位城市
                    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                    if(  ! $.cookie("selectedCityPinyin") && result.data.cityId != this.consts.visitedCityId ) {
                        //alert("定位成功！没有用户选择的城市，而且定位城市不同于路由城市，将要直接跳转到定位城市！") ;
                        window.location.href = this.combineUrl(result.data.cityPinyin) ;
                    }                                  
                } 
            }) ;                       
        } , ( error ) => {
            this.states.locationStage = 2 ;  //标识定位已结束            
            switch(error.code) {
                case error.PERMISSION_DENIED :  // 用户阻止了授权                
                this.states.locationMessage = "定位服务暂未开启" ;
                this.states.locationFailCause = "PERMISSION_DENIED" ;                
                this.localtionFail(false) ;               
                break ;

                case error.POSITION_UNAVAILABLE :  //定位信息无效
                this.states.locationMessage = "定位失败" ;
                this.states.locationFailCause = "POSITION_UNAVAILABLE" ;                   
                this.localtionFail(true) ;
                break ;

                case error.TIMEOUT :  //定位超时
                this.states.locationMessage = "定位失败" ;
                this.states.locationFailCause = "TIMEOUT" ;                
                this.localtionFail(true) ;
                break ;

                case error.UNKNOWN_ERROR :  //其他不可预知的错误  
                this.states.locationMessage = "定位失败" ;
                this.states.locationFailCause = "UNKNOWN_ERROR" ;                          
                this.localtionFail(true) ;
                break ;
            }
        } , geoOpts ) ;

    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    收起城市选择器
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    retractCitySelector() {
        this.consts.$citySelector.hide() ;
        $("body>.container").show() ;
        $(document.body).css({ "overflow-y" : "auto" }) ;
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    弹出城市选择器
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    popCitySelector() {        
        this.consts.$citySelector.slideDown(200) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        房源隐藏，禁掉body的滚动条
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        $("body>.container").hide() ;
        $(document.body).css({ "overflow-y" : "hidden" }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        埋点
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.bigDataUtil.bigData({ "pageName" : "1005" , "type" : 1 }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        如果没有城市记录说明是第一次绘制，否则就不需要做什么
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        if($(".city-selector .tabs-frame").children().length) return ;        
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        请求业务城市数据并绘制，绘制完后绑定事件
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.request({ 
            apiUrl : this.apiUrl.businessCity , 
            requestData : { } , 
            success : (result) => {                    
                let cities = this.filterBusinessCity(result.data) ;  //取出所有满足条件的城市清单   
                //console.log(cities) ;                 
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                绘制tabs-handle
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                let $ul = "<ul class=\"tabs-handle\"><li class=\"on\" data-sign=\"domestic\">国内</li><li data-sign=\"overseas\">国际</li></ul>" ;
                if( $.isEmptyObject(cities.domestic) || $.isEmptyObject(cities.overseas) ) {
                    if( ! $.isEmptyObject(cities.domestic) ) $ul = "<ul class=\"tabs-handle\" style=\"display : none\"><li class=\"on\" data-sign=\"domestic\">国内</li><li data-sign=\"overseas\">国际</li></ul>" ;
                    else $ul = "<ul class=\"tabs-handle\" style=\"display : none\"><li data-sign=\"domestic\">国内</li><li class=\"on\" data-sign=\"overseas\">国际</li></ul>" ;
                }                                
                $(".city-selector .caption").append($ul) ;
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                绘制tabs-frame
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
                let $status = ( this.states.locationStage == 2 && ! this.states.locationFailCause && this.states.locationCityName ) ? "<a class=\"location-city\" data-cityid=\"" + this.states.locationCityId + "\" data-pinyin=\"" + this.states.locationCityPinyin + "\" data-china=\"" + this.states.locationCityChina + "\">" + this.states.locationCityName + "</a>" : "<a class=\"location-city\">" + this.states.locationMessage + "</a>" ;

                let $domesticFrame = $(document.createElement("DIV")).addClass("tabs-frame domestic") ;                
                $domesticFrame.append( "<span>定位城市</span>" + $status ) ;
                if(  ! $.isEmptyObject(cities.domestic) ) {
                    for( let key in cities.domestic ) {
                        $domesticFrame.append("<span>" + key + "</span>") ;
                        cities.domestic[key].forEach((city) => {
                            $domesticFrame.append("<a data-cityid=\"" + city.cityId + "\" data-pinyin=\"" + city.pinyin + "\" data-china=\"" + city.cityType + "\">" + city.cityName + "</a>") ;
                        }) ;
                    }
                }
                this.consts.$citySelector.append($domesticFrame) ;

                let $overseasFrame = $(document.createElement("DIV")).addClass("tabs-frame overseas") ;
                $overseasFrame.append( "<span>定位城市</span>" + $status ) ;
                if(  ! $.isEmptyObject(cities.overseas) ) {
                    for( let key in cities.overseas ) {
                        $overseasFrame.append("<span>" + key + "</span>") ;
                        cities.overseas[key].forEach((city) => {
                            $overseasFrame.append("<a data-cityid=\"" + city.cityId + "\" data-pinyin=\"" + city.pinyin + "\" data-china=\"" + city.cityType + "\">" + city.cityName + "</a>") ;
                        }) ;
                    }
                }
                this.consts.$citySelector.append($overseasFrame) ;                
                /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
                最后给dom节点绑定事件
                -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
                this.citySelectorEventDelegate() ;
            } 
        }) ; 
    }    
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    定位失败的处理    
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    localtionFail(tips) {
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------        
        1. 将定位cookie系列全部置空       
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.states.locationCityId = null ;
        this.states.locationCityName = null ;
        this.states.locationCityPinyin = null ;
        this.states.locationCityChina = null ;
        $.cookie("locationLatitude" , null , { path : "/" , expires : 365 * 24 * 60 } ) ;
        $.cookie("locationLongitude" , null , { path : "/" , expires : 365 * 24 * 60 } ) ;         
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------        
        2. 先执行定位回调       
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.locationCallback() ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------        
        发现如果定位失败，发现城市选择弹层无法滑动，所以做了如下处理    
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        this.consts.$citySelector.css({ "overflow" : "auto" }) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------        
        3. 改写城市选择弹层中定位城市占位符信息   
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/        
        $(".city-selector .tabs-frame .location-city").replaceWith("<a class=\"location-city\">" + this.states.locationMessage + "</a>") ;        
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        4. 如果先前用户选择过城市就直接跳转到选择的城市，否则就根据tips来决定是否需要弹框选择
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        if( $.cookie("selectedCityPinyin")) {            
            if( $.cookie("selectedCityPinyin") != this.consts.visitedCityPinyin ) {
                //alert("定位失败！而且用户选择过跟当前不同的城市，将要跳转到用户选择的城市..." + this.combineUrl($.cookie("selectedCityPinyin")) ) ;
                window.location.href = this.combineUrl($.cookie("selectedCityPinyin")) ;
            }
        }
        else {
            if( ! tips) this.popCitySelector() ;
            else {
                $.modal({
                    "id" : "orientateTimeoutDialog" ,
                    "title" : "" ,      
                    "content" : "定位失败<br>请手动选择您的城市" ,
                    "buttons" : [
                        { "text" : "去选择" , "className" : "goto-select-city" , "clickCallback" : () => {
                                $.modal.close("orientateTimeoutDialog") ;
                                this.popCitySelector() ;
                            } 
                        } 
                    ]
                }) ;
            }            
        }        
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    为了保证cookie的统一写入口，页面同步渲染的时候将城市信息放到页面隐藏域中，然后由FE来写到 cookie中
    这个cookie的作用是为了满足prd里面要求的：有上次浏览城市信息就不要定位了
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    setVisitedCityCache() {        
        $.cookie("visitedCityId" , this.consts.visitedCityId , { "path" : "/" , expires : 365 * 24 * 60 } ) ;
        $.cookie("visitedCityName" , this.consts.visitedCityName , { "path" : "/" , expires : 365 * 24 * 60 } ) ;
        $.cookie("visitedCityPinyin" , this.consts.visitedCityPinyin , { "path" : "/" , expires : 365 * 24 * 60 } ) ;
        $.cookie("visitedCityChina" , this.consts.visitedCityChina , { "path" : "/" , expires : 365 * 24 * 60 } ) ;
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    通过城市拼音和模块类型组织列表页面跳转地址
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    combineUrl(cityPinyin) {
        let urlArray = window.location.href.split("/") ;
        urlArray[3] = cityPinyin ;
        urlArray = urlArray.slice( 0 , 5 ) ;
        return urlArray.join("/") ;
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    绘制搜索结果或者历史，history用来标识是否搜索历史
    如果是搜索历史的渲染，每条历史应该是已经有了埋点参数了
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    renderSearchResult( { items , history = false }) {
        items && items.forEach((source) => {
            let $li = $(document.createElement("LI")) ;            
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            埋点参数
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            let eventNameMapper = history ? { "xf" : "1050010" , "esf" : "1068013" , "rent" : "" } : { "xf" : "1050011" , "esf" : "1068014" , "rent" : "" } ;            
            let eventParam = history ? { "search_history" : source.estateDesc } : { "choice_content" : source.estateDesc } ;
            if(eventNameMapper[this.moduleType]) {
                $li.attr("data-bigdata" , encodeURIComponent(JSON.stringify({ "eventName" : eventNameMapper[this.moduleType] , "eventParam" : eventParam }))) ;
            }          
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            其他信息全绑到节点上data-detail上
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
            $li.attr("data-detail" , encodeURIComponent(JSON.stringify(source)) ) ;
            /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
            绘制单条搜索结果
            -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/                              
            $li.append("<dl><dt>" + source.estateDesc.replace( source.markname , "<span>" + source.markname + "</span>" ) + "</dt><dd>" + source.address.replace( source.markname , "<span>" + source.markname + "</span>" ) + "</dd></dl>") ;
            this.consts.$searchResultList.append($li) ;
        }) ; 
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        如果是渲染搜索历史，就要加上显示历史的按钮以及历史记录title        
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
        if( items && items.length && history) $(".substitute-mask .list-container div").show(100) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        最后进行事件绑定
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/ 
        $(".substitute-mask .list li").off().click((event) => {
            let $item = $(event.currentTarget) ;
            if($item.hasClass("no-data")) return ;             
            this.setSearchCache(JSON.parse(decodeURIComponent($item.attr("data-detail")))) ;
            this.searchResultItemClick(JSON.parse(decodeURIComponent($item.attr("data-detail")))) ;
        }) ;      

    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    将指定的对象数据记录到搜索localStorage中，最多记录5条
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    setSearchCache(item) {
        let searchCache = window.localStorage[this.moduleType + "SearchHistory"] ;
        searchCache = searchCache ? JSON.parse(searchCache) : [] ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        取得和当前项目部重复的前4条记录
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        let noRepeatItems = [] ;
        $.each( searchCache , ( index , cache ) => {
            if( cache.value != item.value || cache.type != item.type ) noRepeatItems.push(cache) ;
            if( noRepeatItems.length >= 4 ) return false ;
        } ) ;
        /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        再在前面追加指定的哪条
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
         noRepeatItems.unshift(item) ;
         /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
        最后重新设置到localStorage中
        -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
        window.localStorage[this.moduleType + "SearchHistory" ] = JSON.stringify(noRepeatItems) ;   
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    根据condition路由参数里面是否有：sli,sst,sdi,sto,sid ，分别对应li,st,di,to,id，为了区分这五个条件来自搜索模块，如果有就要在假的搜索区域展示this.moduleType + "SearchHistory"
    这个localStorage里面缓存的搜索历史里面第一条
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
    detectSearchResultClick() {
        let urlArray = window.location.href.split("/") ;        
        let paramObj = ParamGenerator.queryString2Object(urlArray[5]) ;
        if( paramObj.hasOwnProperty("sli") || paramObj.hasOwnProperty("sst") || paramObj.hasOwnProperty("sdi") || paramObj.hasOwnProperty("sto") || paramObj.hasOwnProperty("sid")) {
            let searchCache = window.localStorage[this.moduleType + "SearchHistory"] ;            
            searchCache = searchCache ? JSON.parse(searchCache) : [] ;
            if(searchCache.length) $(".conning-tower dl dd span").text(searchCache[0].estateDesc) ;
        }       
    }
    /*-----------------------------------------------------------------------------------------------------------------------------------------------------------------------
    整个组件定义结束
    -----------------------------------------------------------------------------------------------------------------------------------------------------------------------*/
 }
